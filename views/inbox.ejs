<%- include('./layouts/app'); %>

    <div id="chat-container">
      <div id="search-container">
        <input type="text" placeholder="Search" />
      </div>
      <div id="conversation-list" style="color: #fff">
        
        <% data.forEach((conversation) => { %>
          <% if(conversation.creator.id == loggedInUser.userid) { %>
            <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>')">
              <% if(conversation.participant.avatar){ %>
                <img src="./uploads/avatars/<%= conversation.participant.avatar %>" alt="<%= conversation.participant.name %>">
              <% }else{ %>
                  <img src="./images/nophoto.png" alt="<%= conversation.participant.name %>">
              <% } %>
              <div class="title-text"><%= conversation.participant.name %></div>
              <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
            </div>
            <% }else{ %>
              <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator.name %>')">
                <% if(conversation.creator.avatar){ %>
                  <img src="./uploads/avatars/<%= conversation.creator.avatar %>" alt="<%= conversation.creator.name %>">
                <% }else{ %>
                    <img src="./images/nophoto.png" alt="<%= conversation.creator.name %>">
                <% } %>
                <div class="title-text"><%= conversation.creator.name %></div>
                <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
              </div>
            <% } %>
        <% }); %>
        <!-- no conversation placeholder for 0 conversation -->
        <% if(data && data.length === 0) { %>
          <div class="nothing"><img src="./images/no-conversation.svg" /></div>
        <% } %>
      </div>
      <div class="new-message-container">
        <a href="#" onclick="openModal()">+</a>
      </div>
      <div id="chat-title">
        <span id="conversation-partner">Sumit</span>
        <img src="./images/trash.png" alt="Delete Conversation" />
      </div>
      <div id="chat-message-list">
        <!-- <div class="message-row other-message">
          <div class="message-content">
            <img src="./images/user1.png" alt="Sumit" />
            <div class="message-text">Ok then</div>
            <div class="message-time">Apr 16</div>
          </div>
        </div>
        <div class="message-row you-message">
          <div class="message-content">
            <div class="message-text">Lorem ipsum dolor sit amet</div>
            <div class="message-time">Apr 16</div>
          </div>
        </div> -->
        <div class="nothing">Select a conversation</div>
      </div>
      <form id="chat-form" method="post" enctype="multipart/form-data">
        <label for="attachment"><img src="./images/attachment.png" alt=Add Attachment"" /></label>
        <input type="file" name="attachment" id="attachment" class="hide"  multiple >
        <input type="text" name="message" placeholder="Type a message" autocomplete="off"/>
      </form>
    </div>

    <%- include('./partials/add-conversation-modal') %>

    <!-- import socket io client from cdn -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script>

    <script>
      const messageContainer = document.getElementById("chat-message-list");
      const chatTitleContainer = document.getElementById("chat-title");
      const chatPartnerTitleName = document.getElementById("conversation-partner");
      const form = document.querySelector("#chat-form");
      const loggedUserId = "<%= loggedInUser.userid %>";;
      const loggedUserUsername = "<%= loggedInUser.username %>";
      let participant= null; // selected participant object
      let current_conversation_id; // selected conversation id

      
      // socket initialization
      const socket = io('<%= process.env.APP_URL %>');

      // handle new/live incoming message from socket
      socket.on("new_message", data => {
        // only respond if current conversation is open in any client
        if(data.message.conversation_id == current_conversation_id) {
          // message class
          const messageClass = data.message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
          
          const senderAvatar = data.message.sender.avatar ? `<img src="./uploads/avatars/${data.message.sender.avatar}" alt="${data.message.sender.name}" />` : `<img src="./images/nophoto.png" alt="${data.message.sender.name}" />`;

          // message attachments
          let attachments = '<div class="attachments">';

          if(data.message.attachment && data.message.attachment.length > 0) {
            data.message.attachment.forEach(attachment => {
              attachments += `<img src="./uploads/attachments/${attachment}" /> `;
            });
          }

          attachments += '</div>';

          let messageHTML;

          // do not show avatar for loggedin user
          if(data.message.sender.id == loggedinUserId) {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          } else {
            messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              ${senderAvatar}
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
            </div></div>`;
          }

          // append the inoming message to message area as last item
          document.querySelector('#chat-message-list > .message-row:first-child').insertAdjacentHTML('beforeBegin', messageHTML);
        }
      });
      
      async function getMessages(conversation_id, current_conversation_name){
        // conversation failure toast
        const conversationFailueToast = Toastify({
          text: "Failed to load messages.",
          duration: 2000,
        });

        // send request to get messages
        let response = await fetch(`/inbox/messages/${conversation_id}`);
        let result = await response.json();

        if(!result.errors && result.data){
          form.style.visibility = 'visible';

          const {data, userid, conversation_id} = result;
          participant = data.participant,
          current_conversation_id = conversation_id;
          
          if(data.messages){
            let allMessages = '';
            if(data.messages.length > 0){
              data.messages.forEach((message) => {
                const senderPath = message.sender.avatar ? `./uploads.avatars/${message.sender.avatar}` : './images/nophoto.png';
                const messageClass = message.sender.id === loggedUserId ? 'you-message' : 'other-message';
                const showAvatar = message.sender.id === loggedUserId ? '' : `<img src="${senderPath}" alt="${sender.message.name}" />`;

                let attachments = '<div class="attachments">';
                  if(message.attachments && message.attachments.length > 0){
                    message.attachments.forEach((attachment) => {
                      attachments += `<img src="./uploads/attachments/${attachment}" /> `;
                    });
                  }
                  attachments += '</div>';

                  // final message html
                  let messageHtml = `<div class="message-row ${messageClass}"><div class="message-content">
                    ${showAvatar}
                    <div class="message-text">${message.text}</div>
                    ${attachments}
                    <div class="message-time">${moment(message.date_time).fromNow()}</div>
                    `;
                    allMessages += messageHtml;
                    messageContainer.innerHTML = allMessages;

              });
            }else if(data.messages.length == 0){
              messageContainer.innerHTML = '<div class="message-row"></div>';
            }
            chatPartnerTitleName.textContent = current_conversation_name;
            chatTitleContainer.style.visibility = 'visible';
          }
        }else{
            conversationFailueToast.showToast();
          }
      }
    
      // send request to sending message
      form.onsubmit = async function(event){
        event.preventDefault();
        //prepare the from data
        const formData = new FormData(form);
        formData.append('receiverId', participant.id);
        formData.append('receiverName', participant.name);
        formData.append('receiverAvatar', participant.avatar || '');
        formData.append('conversationId', current_conversation_id);

        // send then request to server
        let response = await fetch('/inbox/message', {
          method: "POST",
          body: formData,
        });

        // get then responze
        let result = await response.json();

        if(!result.errors){
          form.reset(); // reset the form
        }else{
          Toastify({
            text: "Error sending message",
            duration: 1000,
          }).showToast();
        }
      }
    </script>
  </body>
</html>
