<%- include('./layouts/app') %>
    <div id="widget-area" class="z-20 items-center">
        <div class="widget-wrapper bg-light-color w-0 invisible transition-weight ease-out duration-300">
            <div class="p-4 flex items-center flex-col gap-3 justify-center h-screen">
                <h2 class="text-2xl text-dark-color font-bold">Theme Setting</h2>
                <div class="flex flex-col gap-3">
                    <button class="p-2 rounded-md" style="background-color: rgb(229 231 235 / 0.4);" onclick="setTheme('default')">Default</button>
                    <button class="p-2 rounded-md" style="background-color: rgb(31 41 55);" onclick="setTheme('dark')">Dark</button>
                    <button class="p-2 rounded-md" style="background-color: rgb(29 78 216);" onclick="setTheme('blue')">Blue</button>
                    <button class="p-2 rounded-md" style="background-color: #29a12e;" onclick="setTheme('green')">Green</button>
                </div>
            </div>
        </div>
        <div class="angle relative flex items-center justify-center ml-3 widget-toggle cursor-pointer w-3 h-14 " >
            <div class="h-4 w-1 rounded-full bg-light-color rotate-[150deg] absolute mb-[.6rem]" style="background-color: white;" ></div>
            <div class="h-4 w-1 rounded-full bg-light-color rotate-[30deg] absolute mt-[.7rem]" style="background-color: white;" ></div>
        </div>
    </div>
    <div class="h-screen flex items-center justify-center ">
        <div class='flex flex-col items-center justify-center p-3 sm:p-0 w-full sm:w-10/12 h-screen overflow-hidden mx-auto'>
            <div class="main-content-wrapper flex justify-between w-full h-[90vh] overflow-hidden p-1 rounded-lg shadow-md bg-clip-padding bg-dark-color backgrop-glass bg-opacity-0">
                <!-- <div class=""> -->
                    <div class="flex flex-col w-20 sm:w-4/12 border-r border-gray-400">
                        <div class="relative flex items-center justify-between h-14 px-3 py-2 bg-light-color">
                            <% if(loggedInUser.avatar){ %>
                                <img src="./uploads/avatars/<%= loggedInUser.avatar %>" alt="" class="w-10 h-10 rounded-full cursor-pointer" id="user-avatar">
                            <% }else{ %>
                                <div class="bg-light-color hover:bg-dark-color flex items-center justify-center text-neutral-content rounded-full w-10 h-10 cursor-pointer" id="user-avatar">
                                    <span class="text-3xl"><%= loggedInUser.username[0].toUpperCase() %></span>
                                </div>
                            <% } %>
                            <div class="hidden sm:flex gap-4 items-center justify-end ">
                                <a href="/inbox">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" class="w-5 h-5 text-soft-color cursor-pointer hover:text-color">
                                        <path strokeLinecap="round" strokeLinejoin="round" d="M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193-.34.027-.68.052-1.02.072v3.091l-3-3c-1.354 0-2.694-.055-4.02-.163a2.115 2.115 0 0 1-.825-.242m9.345-8.334a2.126 2.126 0 0 0-.476-.095 48.64 48.64 0 0 0-8.048 0c-1.131.094-1.976 1.057-1.976 2.192v4.286c0 .837.46 1.58 1.155 1.951m9.345-8.334V6.637c0-1.621-1.152-3.026-2.76-3.235A48.455 48.455 0 0 0 11.25 3c-2.115 0-4.198.137-6.24.402-1.608.209-2.76 1.614-2.76 3.235v6.226c0 1.621 1.152 3.026 2.76 3.235.577.075 1.157.14 1.74.194V21l4.155-4.155" />
                                      </svg>                                      
                                </a>
                                                                                    
                                <div class="relative" >
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-soft-color cursor-pointer hover:text-color " id="header-dots">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 12.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 18.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z" />
                                    </svg>
                                    <div class="dropdown min-w-max absolute right-0 top-8 py-3 bg-light-color app-shadow-2xl hidden opacity-0 rounded-md" id="header-dots-dropdown">
                                        <div class="text-color">
                                            <a href="" class="flex items-center gap-3 px-4 py-1 hover-bg-dark-color cursor-pointer">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                              </svg>
                                               New Message</a>
                                            <a href="" class="flex items-center gap-3 px-4 py-1 hover-bg-dark-color cursor-pointer">Select Chats</a>
                                            <a href="" class="flex items-center gap-3 px-4 py-1 hover-bg-dark-color cursor-pointer">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 0 1 1.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.559.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.894.149c-.424.07-.764.383-.929.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 0 1-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.398.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 0 1-.12-1.45l.527-.737c.25-.35.272-.806.108-1.204-.165-.397-.506-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.108-1.204l-.526-.738a1.125 1.125 0 0 1 .12-1.45l.773-.773a1.125 1.125 0 0 1 1.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894Z" />
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" />
                                                  </svg>
                                                  
                                                  Settings</a>
                                            <a class="flex items-center gap-3 px-4 py-1 hover-bg-dark-color cursor-pointer " onclick="logout()">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M16.5 10.5V6.75a4.5 4.5 0 1 0-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 0 0 2.25-2.25v-6.75a2.25 2.25 0 0 0-2.25-2.25H6.75a2.25 2.25 0 0 0-2.25 2.25v6.75a2.25 2.25 0 0 0 2.25 2.25Z" />
                                                  </svg>
                                                  
                                                Logout</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!-- Profile off canvas menu start -->
                            <%- include('./partials/profile') %>
                            <!-- Profile off canvas menu end -->
                        </div> 
                        <!-- conversation search start -->
                        <div class="hidden sm:flex items-center gap-3 justify-between h-8 my-2 px-3">
                            <div class="flex gap-4 items-center w-full bg-light-color rounded-md px-3 p-1 text-soft-color">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-soft-color cursor-pointer hover:text-color">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
                                </svg>
                                <input type="text" placeholder="Search" class="user-search-input bg-transparent focus:outline-none border-none" onkeyup="filterUserDataset(event)">
                            </div>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-soft-color cursor-pointer hover:text-color">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25H12" />
                            </svg>
                        </div>
                        <!-- conversation search end -->

                        <!-- conversation list start -->
                        <div id="user-content-wrapper" class="h-[76vh] overflow-y-scroll chat-content-wrapper "></div>
                        <!-- conversation list end -->
                    </div>
                    <div class="flex flex-col w-full sm:w-8/12 justify-between ">
                        <div id="chat-message-title-container" class="flex items-center justify-end px-3 h-14 ">
                            
                            <div class="user-details-actions flex items-center justify-end hidden">
                                <div class="user-details-edit-btn border border-gray-200/40 px-3 py-2 rounded-l-lg cursor-pointer">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6" class="w-5 h-5 text-soft-color cursor-pointer hover:text-color">
                                        <path strokeLinecap="round" strokeLinejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                                    </svg>
                                </div>
                                <div class="user-details-delete-btn border border-gray-200/40 px-3 py-2 rounded-r-lg cursor-pointer">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="size-6" class="w-5 h-5 text-soft-color cursor-pointer hover:text-color">
                                        <path strokeLinecap="round" strokeLinejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                        <div id="user-container-list" class="flex flex-col flex-col gap-4 h-[calc(85vh-112px)] p-3 overflow-y-scroll">
                            
                            <div class="flex gap-2 text-soft-color items-center justify-center h-full">
                                <h1 class="text-2xl font-bold">Select a any User to see details</h1>
                            </div>
                        </div>
                        <!-- chat-form-container end -->
                    </div>
                <!-- </div> -->
            </div>
        </div>
    </div>
    <!-- import socket io client from cdn -->
    <script src="./js/app.js"></script>

    <script>
        let userDataset;
        async function fetchUsers(){
            let response = await fetch('/users', {
                method: "POST",
                headers: {"Content-type": "application/json; charset=UTF-8"}
            });
            let result = await response.json();
            populateUserData(result);
            userDataset = result;
            return result;
        }
        fetchUsers();

        let current_user_info_id; // selected conversation id
        let loggedInUserId = '<%= loggedInUser.user_id %>';
        // get conversations and print start
        const user_content_wrapper = document.querySelector("#user-content-wrapper");

        const populateUserData = (userDataset) => {

            let allUserHtml = '';
            if(userDataset && userDataset.length > 0){
                userDataset.forEach((user, index) => {
                    let userHtml = '';
                        const userAvatar = user.avatar ? `<img src="./uploads/avatars/${user.avatar}" alt="${user.name}" class="w-10 h-10 rounded-full" id="user_list_item_avatar${user._id}">` : `<div class="bg-light-color hover:bg-dark-color flex items-center justify-center text-neutral-content rounded-full w-10 h-10" id="user_list_item_avatar${user._id}">
                                                    <span class="text-3xl">${user.name[0].toUpperCase()}</span>
                                                </div>`;
                        // Convert user object to a JSON string and escape quotes
                        const userJson = JSON.stringify(user);
                        userHtml = `<div class="flex items-center gap-3 p-2 sm:px-3 py-2 h-14 text-soft-color hover-bg-light-color cursor-pointer" onclick='getUserDetails(${userJson})'>
                                <div class=" w-10 h-10 overflow-hidden" >
                                    ${userAvatar}
                                </div>
                                <div class="hidden flex-1 sm:flex items-center justify-between w-full py-1 leading-normal chat-content-info ${index !== userDataset.length - 1 ? ' border-b border-gray-200/40' : '' }">
                                    <div>
                                        <h3 class="text-md font-bold">${user.name}</h3>
                                        <span class="text-sm text-gray-300">${user.role}</span>
                                    </div>
                                </div>
                            </div>`;
                    allUserHtml += userHtml;
                    user_content_wrapper.innerHTML = allUserHtml;
                });
            }else{
                user_content_wrapper.innerHTML = `<div class="flex flex-col items-center gap-3 justify-center text-center p-2 sm:px-3 py-2 h-full text-soft-color hover-bg-light-color cursor-pointer">
                    <div>
                        <img src="./images/no-conversation.png" alt="" class="w-32">
                    </div>
                    <div>
                        <h3 class="text-md font-bold">No users yet</h3>
                        <p>Create user to contact others</p>
                    </div>
                </div>`
            }
        }
        // get conversations and print end

        // filter conversations start
        function filterUserDataset(event) {
            let user_search_input = document.querySelector(".user-search-input").value.toLowerCase();
            const filteredUserDataset = userDataset.filter(item =>
                user_search_input === '' ||
                item.name.toLowerCase().includes(user_search_input));
            populateUserData(filteredUserDataset);
        }
        // filter conversations end
    
        // start get user details
        const chat_message_title_container = document.querySelector("#chat-message-title-container");
        const chat_message_avatar_container = document.querySelector("#chat-message-avatar-container");
        const chat_message_title_name = document.querySelector("#chat-message-title-name");
        const user_container_list = document.querySelector("#user-container-list");
        const chat_form_container = document.querySelector("#chat-form-container");

        async function getUserDetails(userJson){
            const user = typeof userJson === 'string' ? JSON.parse(userJson) : userJson;

            if(user && (Object.keys(user).length > 0)){
                const user_details_actions = document.querySelector('.user-details-actions');
                user_details_actions.classList.remove('hidden');
                let userInfoHtml = `<form id="user-details-edit-form" method="put" enctype="multipart/form-data">`;
                const avatar = user.avatar && user.avatar !== 'undefined' ? 
                    `<img src="./uploads/avatars/${user.avatar}" alt="${user.name}" class="bg-light-color w-52 h-52 rounded-full" id="avatarPreview">` : 
                    `
                        <h2 class="text-3xl" id="avatarPreview">${user.name}</h2>
                    `;

                let userHtml = `<div class="message-row flex flex-col gap-2 text-soft-color items-center justify-center text-center">
                        <div class="flex flex-col items-center justify-center">
                            <div class="relative w-52 h-52">
                                <div class="bg-light-color overflow-hidden hover:bg-dark-color flex items-center justify-center text-neutral-content rounded-full w-52 h-52">
                                    ${avatar}
                                </div>
                                <label for="avatarUpload" class="hidden avatarUploadLabel absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-full cursor-pointer opacity-0 hover:opacity-100 transition-opacity duration-300">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" class="w-16">
                                        <path strokeLinecap="round" strokeLinejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5m-13.5-9L12 3m0 0 4.5 4.5M12 3v13.5" />
                                    </svg>
                                </label>
                            </div>
                                <input id="avatarUpload" type="file" name="avatar" class="hidden" accept="image/*" onchange="load_image_file(event, 'avatarPreview')">
                            </div>

                            <div class="w-full">
                                <p class="name user-info-text text-2xl font-bold">${user.name}</p>
                                <input type="text" name="name" id="name" placeholder="name" class="min-w-fit rounded-lg border border-gray-700 bg-gray-800 px-4 py-1 focus:outline-none focus:ring-2 focus:ring-gray-700/40 focus:ring-offset-2 focus:ring-offset-gray-700/40 text-gray-300 text-sm user-info-input hidden" value="${user.name}" />
                            </div>
                            <div class="min-w-fit">
                                <p class="status user-info-text text-md text-dark-color mt-1">${user.status}</p>
                                <input type="text" name="status" id="status" placeholder="Status" class="min-w-fit rounded-lg border border-gray-700 bg-gray-800 px-4 py-1 focus:outline-none focus:ring-2 focus:ring-gray-700/40 focus:ring-offset-2 focus:ring-offset-gray-700/40 text-gray-300 text-sm user-info-input hidden" value="${user.status}" />
                            </div>
                            <div class="min-w-fit">
                                <p class="email user-info-text text-md text-dark-color mt-1">${user.email}</p>
                                <input type="email" name="email" id="email" placeholder="Email" class="min-w-fit rounded-lg border border-gray-700 bg-gray-800 px-4 py-1 focus:outline-none focus:ring-2 focus:ring-gray-700/40 focus:ring-offset-2 focus:ring-offset-gray-700/40 text-gray-300 text-sm user-info-input hidden" value="${user.email}" />
                            </div>
                            <div class="min-w-fit">
                                <p class="mobile user-info-text text-md text-dark-color mt-1">${user.mobile}</p>
                                <input type="text" name="mobile" id="mobile" placeholder="Mobile" class="min-w-fit rounded-lg border border-gray-700 bg-gray-800 px-4 py-1 focus:outline-none focus:ring-2 focus:ring-gray-700/40 focus:ring-offset-2 focus:ring-offset-gray-700/40 text-gray-300 text-sm user-info-input hidden" value="${user.mobile}" />
                            </div>
                            <div class="min-w-fit">
                                <p class="address user-info-text text-md text-dark-color mt-1">${user.address}</p>
                                <input type="text" name="address" id="address" placeholder="Address" class="min-w-fit rounded-lg border border-gray-700 bg-gray-800 px-4 py-1 focus:outline-none focus:ring-2 focus:ring-gray-700/40 focus:ring-offset-2 focus:ring-offset-gray-700/40 text-gray-300 text-sm user-info-input hidden" value="${user.address}" />
                            </div>
                            <div class="min-w-fit">
                                <button type="button" onclick="saveUserDetails('${user._id}')" class="hidden min-w-full rounded-lg border border-gray-700/0 bg-gray-800 px-4 py-1 focus:outline-none focus:ring-2 focus:ring-gray-800/40 focus:ring-offset-2 focus:ring-offset-gray-800/40 text-gray-300 hover:bg-gray-900">Save</button>
                            </div>
                        </div>
                    </form>`;
                userInfoHtml += userHtml;
                user_container_list.innerHTML = userInfoHtml;
            }else{
                user_container_list.innerHTML = `<div class="message-row message-nothing flex gap-2 text-soft-color items-center justify-center h-full">
                                <h1 class="text-2xl font-bold">You don't have User</h1>
                            </div>`;
                toastr.warning(result.errors.common.msg);
            }
        }
        // end get user details
    
        document.addEventListener('DOMContentLoaded', function() {
        // toggle edit button for showing user details forms
            const user_details_edit_btn = document.querySelector('.user-details-edit-btn');
            user_details_edit_btn.addEventListener("click", function(){
                const inputs = document.querySelectorAll('#user-container-list input:not([type="file"])');
                const user_info_texts = document.querySelectorAll("#user-container-list .user-info-text");
                const button = document.querySelector("#user-container-list button");
                const avatarUploadLabel = document.querySelector("#user-container-list .avatarUploadLabel");
                user_info_texts.forEach(info_text => {
                    info_text.classList.toggle('hidden');
                });

                inputs.forEach(input => {
                    input.classList.toggle('hidden');
                });

                button.classList.toggle('hidden');
                avatarUploadLabel.classList.toggle('hidden');
            });
        });
        // user details information update
        async function saveUserDetails(id){
            const form = document.querySelector("#user-details-edit-form");
            event.preventDefault();
            if(id){
                if(confirm("Are you sure to update this user information!") == true){
                    let formData = new FormData(form);
                    let response = await fetch(`/users/${id}`, {
                        method: "PUT",
                        body: formData,
                    });
                    let result = await response.json();
                    console.log(result);
                    if(!result.errors){
                        toastr.success(result.message);
                        const user_list_item_avatar = document.querySelector(`#user_list_item_avatar${result.user._id}`);
                        if(user_list_item_avatar){
                            if (user_list_item_avatar.tagName.toLowerCase() !== "img") {
                                var img = document.createElement("img");
                                img.src = './uploads/avatars/' + result.user.avatar; // Set the image source
                                img.alt = "Uploaded Image"; // Add alt text (optional)
                                img.className = "w-10 h-10 rounded-full"; // Add any necessary classes

                                // Append the img element to the output element
                                user_list_item_avatar.innerHTML = ""; // Clear any existing content
                                user_list_item_avatar.appendChild(img);
                            }else{
                                user_list_item_avatar.src = './uploads/avatars/' + result.user.avatar;
                            }
                        }
                    }else{
                        toastr.error(result.errors.common.msg);
                    }
                }
            }else{
                toastr.warning("You don't have select an user to update user information.");                
            }
        }
        // end user details information update

        // delete selected user
        async function deleteMeassage(){
            if(!current_user_info_id){
                toastr.warning("You don't have select any conversation to delete messages.");
            }else{
                if(confirm("Are you sure to delete this messages!") == true){
                    let response = await fetch(`/inbox/message/delete/${current_user_info_id}`, {
                        method: "DELETE"
                    });
                    let result = await response.json();
                    if(!result.errors){
                        toastr.success(result.message);
                        user_container_list.innerHTML = `<div class="message-row message-nothing flex gap-2 text-soft-color items-center justify-center h-full">
                                    <h1 class="text-2xl font-bold">You don't have message</h1>
                                </div>`;
                    }else{
                        toastr.error(result.errors.common.msg);
                    }
                }
            }
        }
        // end delete selected user
    </script>
</body>
</html>